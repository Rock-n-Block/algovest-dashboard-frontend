/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  approved: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type ApprovalForAll = ContractEventLog<{
  owner: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Bond extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): Bond;
  clone(): Bond;
  methods: {
    addRewards(_amount: number | string | BN): NonPayableTransactionObject<void>;

    approve(to: string, tokenId: number | string | BN): NonPayableTransactionObject<void>;

    avscoin(): NonPayableTransactionObject<string>;

    balanceOf(owner: string): NonPayableTransactionObject<string>;

    bondInfo(
      arg0: number | string | BN,
      arg1: number | string | BN,
    ): NonPayableTransactionObject<{
      depositTimestamp: string;
      amount: string;
      pendingInterest: string;
      currentNonce: string;
      withdrawn: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
    }>;

    bondPool(arg0: number | string | BN): NonPayableTransactionObject<string>;

    changeNoncePeriod(_newPeriod: number | string | BN): NonPayableTransactionObject<void>;

    claimInterest(_bondId: number | string | BN): NonPayableTransactionObject<void>;

    createPool(
      _minDeposit: number | string | BN,
      _periodInterestRate: number | string | BN,
      _noncesToUnlock: number | string | BN,
      _locked: boolean,
    ): NonPayableTransactionObject<void>;

    depositAdmin(_amount: number | string | BN): NonPayableTransactionObject<void>;

    depositAvsToken(_amount: number | string | BN): NonPayableTransactionObject<boolean>;

    depositStableCoin(_amount: number | string | BN): NonPayableTransactionObject<void>;

    depositToPool(
      _poolId: number | string | BN,
      _amount: number | string | BN,
    ): NonPayableTransactionObject<void>;

    getApproved(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    inTrading(): NonPayableTransactionObject<string>;

    isApprovedForAll(owner: string, operator: string): NonPayableTransactionObject<boolean>;

    lockPool(_poolId: number | string | BN, _lock: boolean): NonPayableTransactionObject<void>;

    name(): NonPayableTransactionObject<string>;

    noncePeriod(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    ownerOf(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    poolInfo(arg0: number | string | BN): NonPayableTransactionObject<{
      minDeposit: string;
      periodInterestRate: string;
      noncesToUnlock: string;
      locked: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;

    poolLength(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rewardAPY(): NonPayableTransactionObject<string>;

    rewardAvsCoinBalance(): NonPayableTransactionObject<string>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: number | string | BN,
    ): NonPayableTransactionObject<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: number | string | BN,
      _data: string | number[],
    ): NonPayableTransactionObject<void>;

    setApprovalForAll(operator: string, approved: boolean): NonPayableTransactionObject<void>;

    setStakingAmount(_stakingAmount: number | string | BN): NonPayableTransactionObject<void>;

    stablecoin(): NonPayableTransactionObject<string>;

    stakesInfo(arg0: string): NonPayableTransactionObject<{
      amount: string;
      stakedAt: string;
      0: string;
      1: string;
    }>;

    stakingAmount(): NonPayableTransactionObject<string>;

    supportsInterface(interfaceId: string | number[]): NonPayableTransactionObject<boolean>;

    symbol(): NonPayableTransactionObject<string>;

    tokenByIndex(index: number | string | BN): NonPayableTransactionObject<string>;

    tokenOfOwnerByIndex(
      owner: string,
      index: number | string | BN,
    ): NonPayableTransactionObject<string>;

    tokenURI(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    totalDeposit(arg0: string): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: number | string | BN,
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    withdrawAvsToken(): NonPayableTransactionObject<boolean>;

    withdrawPrinciple(_bondId: number | string | BN): NonPayableTransactionObject<void>;

    withdrawToTradingAdmin(_amount: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(options?: EventOptions, cb?: Callback<ApprovalForAll>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(options?: EventOptions, cb?: Callback<OwnershipTransferred>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'Approval', cb: Callback<Approval>): void;
  once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void;

  once(event: 'ApprovalForAll', cb: Callback<ApprovalForAll>): void;
  once(event: 'ApprovalForAll', options: EventOptions, cb: Callback<ApprovalForAll>): void;

  once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void;
  once(
    event: 'OwnershipTransferred',
    options: EventOptions,
    cb: Callback<OwnershipTransferred>,
  ): void;

  once(event: 'Transfer', cb: Callback<Transfer>): void;
  once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void;
}
